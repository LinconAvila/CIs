Explicação do Código: Para resolver o problema proposto, eu utilizei um TAD de tabela hash que já havia implementado. Essa estrutura conta com uma classe Nodo, usada para montar a tabela, e oferece os métodos de hashing, inserção, busca e remoção. Além disso, implementei a técnica de separate chaining para tratar colisões, ou seja, cada posição da tabela armazena uma lista ligada com os elementos que colidiram naquele índice. A partir dessa base, criei a classe Circuito, que utiliza a hash table para gerenciar as células pelo ID e também instancia a classe Celula para representar cada uma delas com seus respectivos atributos (id, largura, altura, coordenada x e linha).


Escolha das Estruturas: Enquanto eu lia a proposição do problema, identifiquei que a tabela hash seria uma boa escolha de estrutura de dados para representar as células. Eu cheguei a essa conclusão devido as operações que este TAD requisita, principalmente a necessidade de realizar buscas e remoções eficientes, e também por conta da exigência de que duas células não podem ocupar o mesmo espaço, o que me recordou da ideia de colisões e como tratá-las. Por isso, apliquei o separate chaining na minha implementação, onde cada posição da tabela armazena uma lista ligada com os nós que colidiram. Essa técnica garante uma busca com complexidade média de O(1) e, no pior caso (se todas as chaves colidirem), O(n). Para armazenar a disposição das células fisicamente, utilizei uma lista com 145 linhas, cada uma representando uma faixa de altura fixa de 504 unidades, onde cada linha é uma lista de células organizadas conforme a coordenada x. O tempo de inserção pode ser O(n) no pior caso dentro de uma linha, contudo como a largura máxima da linha é limitada (2500 unidades) e a quantidade de células que cabem nela é pequena, creio que não afete significativamente a performance.


 